Random LoadBalance     基于权重的随机负载均衡机制   按百分比分发请求

RoundRobin LoadBalance 基于权重的轮询负载均衡机器	
	即按百分比也按轮询，按照轮询分发，当一台机器到达所承受权重，
	将不再下发请求到此机器
	
LeastActive LoadBalance 最少活跃数负载均衡机制
	选择处理请求最快的服务提供者处理
	
ConsistentHash LoadBalance 一致性hash负载均衡机器
	根据请求参数的hash值来分发请求，即100条同一参数的请求，
	请求只会被一台机器处理


****服务降级：
	当服务器压力剧增的情况下，根据实际业务情况及流量，
	对一些服务和页面有策略的不处理或换种简单的方式处理，
	从而达到释放服务器资源以确保核心交易正常运作或高效运作。
	
	1、mock=force:return+null 表示消费方对该服务的方法调用直接返回null值，
	不发起远程调用，用来屏蔽不重要服务不可用时对调用方的影响。
	
	2、mock=fail:return+null （容错处理） 表示消费方对该服务的方法在调用失败后，再返回null值，
	不抛异常。用来容忍不重要服务不稳定时对调用方的影响。
	
****集群容错模式：
	Failover Cluster(默认)：调用失败自动切换，重试其它服务器。通常用于读操作，
	但重试会带来更长延迟，可通过 retries 属性设置重试次数（不含第一次）
	
	Failfast Cluster：快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录。
	
	Failback Cluster：失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。
	
	Forking Cluster：并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，
	但需要浪费更多服务资源，可通过 forks="2" 来设置最大并行数
	
	Broadcast Cluster：广播调用所有提供者，逐个调用，任意一台报错则报错。
	通常用于通知所有提供者更新缓存或日志等本地资源信息。

------------------------------------------------------------------

**一次完整的RPC调用流程(同步异调)如下：
	1、服务消费方(client)调用以本地调用方式调用服务。
	2、client stub 接收到调用后负责将方法、参数等组装成能够进行网络传输的消息体。
	3、client stub 找到服务地址，并将消息发送到服务端。
	4、server stub 收到消息后进行解码。
	5、server stub 根据解码结果调用本地的服务。
	6、本地服务将执行并将结果返回给server stub。
	7、server stub 将返回结果打包成消息体并发送至消费方。
	8、client stub 接收到消息，并进行解码。
	9、服务消费方得到最终结果。

	**RPC框架的目标就是将2-8的步骤都封装起来，这些细节对客户来说是透明的，不可见的。




























	
	
	
	
	